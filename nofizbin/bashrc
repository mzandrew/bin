#!/bin/bash -e

function showPATH {
	set | /bin/grep "^PATH=" | /bin/sed -e "s,^PATH=,," | /bin/sed -e "s,:,\n,g"
}
export -f showPATH

function canonicalPATH {
	#PATH
	PATH=$(showPATH | ${HOME}/bin/uniq.py | /usr/bin/tr '\n' : | /bin/sed -e "s,:$,,")
}
export -f canonicalPATH

function addPATH {
	if [ $# -ge 1 ]; then
		for each; do
			PATH="$PATH:$each"
		done
	fi
	canonicalPATH
}
export -f addPATH

function delPATH {
	if [ $# -ge 1 ]; then
		string=""
		for each; do
			string="${string} | /bin/grep -v ${each}"
		done
		PATH=$(eval showPATH $string | /usr/bin/tr '\n' : | /bin/sed -e "s,:$,,")
	fi
	canonicalPATH
}
export -f delPATH

# use the 4 above functions like so:
# showPATH # shows the current PATH, one entry per line
# canonicalPATH # removes duplicate entries from the PATH
# addPATH /usr/sbin # adds an entry to the PATH and goes through to remove duplicates
# delPATH cadence xilinx # removes all entries that match "cadence" or "xilinx" from the PATH

alias restorePATH="export PATH=/usr/local/bin:/bin:/usr/bin:/usr/local/root/bin:/sbin:/usr/sbin"

# \w is $PWD, but with ~
# \u is $USER
# \h is $HOST
# \$ is $ normally and # for root
declare myPS1='[\u@\h \w]\$ '
# prepend some stuff to get the xterm titlebar to be the same:
case $TERM in
	xterm*)
		PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ ';;
	linux*)
		#PS1='\[\033]0;'${myPS1}'\007\]'${myPS1}
		PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ ';;
#	*)
#		:
esac

umask 0027

function GIDof {
	group=$1
	grep ^$group /etc/group | sed -e "s,$group:x:\([0-9]\+\):.*,\1,"
}
export -f GIDof
#export GID=$(GIDof asic)

alias df="df --block-size=1000000000 | grep -v /dev/loop"

export HISTSIZE=5000
export HISTFILESIZE=

# cadence/asic related:
#export mydk="${HOME}/asic/design-kits/TSMC-130nm"
#export mydk="${HOME}/asic/design-kits/IBM_Latest_IC615"
#alias dk='cd ${mydk}; . bashrc-64'
#alias v="virtuoso"

#addPATH /sbin /usr/sbin
#addPATH /sbin /usr/sbin
#PATH=$PATH:/sbin:/usr/sbin
#PATH="${PATH}:${HOME}/bin"
#echo $(find \( -type d -o -type l \)) | sed -e "s,^\. ,./ ,"
#. ./bin ./cygwin-bin ./generic
#set | grep ^PATH=
if [ -e "${HOME}/bin" ]; then
	PATH=$PATH:$(cd "${HOME}/bin"; echo $(find \( -type d -o -type l \)) | sed -e "s,^\. ,./ ," | sed -e "s,$, ," | sed -e "s,\./\([^ ]*\) ,${HOME}/bin/\1:,g" | sed -e "s,:$,,")
fi
#set | grep ^PATH=
#/home/mza/bin/:/home/mza/bin/bin:/home/mza/bin/cygwin-bin:/home/mza/bin/generic

# include this file in your ${HOME}/.bashrc with the following 3 lines:
#if [ -e "${HOME}/build/bin/nofizbin/bashrc" ]; then
#	. "${HOME}/build/bin/nofizbin/bashrc"
#fi

export EDITOR=/usr/bin/vim

export PATH

export COLUMNS

alias bin="cd $HOME/build/bin"

declare interactive_ysq="ask"
function interactive {
	local command="${1}"
	local description="${2}"
	echo; echo "the command \"$command\" will:"; echo "$description"
	if [ "$interactive_ysq" = "yes" ]; then
		eval $command
	else
		echo "okay to continue?"
		select s in yes skip-this-step quit; do
			if [ "$s" = "yes" ]; then
				echo "running \"$command\"..."
				eval $command
			elif [ "$s" = "skip-this-step" ]; then
				echo "user skipped this step"
				echo
				return
			elif [ "$s" = "quit" ]; then
				echo "user quit $0"
				if [ -z "$PS1" ]; then
					exit 1
				else
					return
				fi
			fi
			break;
		done
		echo
	fi
}

declare -xi numcores=$(($(cat /proc/cpuinfo | grep '^processor' | tail -n1 | awk '{print $3}')+1))

export HISTTIMEFORMAT="%Y-%m-%d+%H:%M:%S "

